import { createSlice, createAsyncThunk } from "@reduxjs/toolkit";
import notificationService from "./notificationService";

const initialState = {
    notifications: [],
    isError: false,
    isSuccess: false,
    isLoading: false,
    message: null,
    onlineUsers: [],
};

export const getNotifications = createAsyncThunk(
    "notification/getNotifications",
    async (data, thunkAPI) => {
        // const { ...otherData } = data;
        try {
            return await notificationService.getNotifications();
        } catch (error) {
            let message = null;
            if (error.response && error.response.data && error.response.data.errors) {
                message = error.response.data.errors;
            } else {
                message = error.response.data.errors.message;
            }

            return thunkAPI.rejectWithValue(message);
        }
    })

const notificationSlice = createSlice({
    name: "notification",
    initialState,
    reducers: {
        resetNotification: (state) => {
            state.notifications = []
            state.isLoading = false;
            state.isSuccess = false;
            state.isError = false;
            state.message = null;
        },
        newNotification: (state, action) => {
            state.notifications.unshift(action.payload.notification);
        },
        updateNotification: (state, action) => {
            const index = state.notifications.findIndex((n) => n._id === action.payload._id);
            if (index !== -1) {
                state.notifications[index] = action.payload;
            }
        },
        setOnlineUsers: (state, action) => {
            state.onlineUsers = action.payload;
        },
        addOnlineUser: (state, action) => {
            state.onlineUsers = addToArray(state.onlineUsers, action.payload);
        },
        removeOnlineUser: (state, action) => {
            state.onlineUsers = removeFromArray(
                state.onlineUsers,
                action.payload,
                '_id'
            );
        },
    },
    extraReducers: (builder) => {
        builder.addCase(getNotifications.pending, (state) => {
            state.isLoading = true
        })
            .addCase(getNotifications.fulfilled, (state, action) => {
                state.notifications = action.payload.data;
                state.isLoading = false;
                state.isSuccess = true;
            })
            .addCase(getNotifications.rejected, (state, action) => {
                state.notifications = [];
                state.isLoading = false;
                state.isError = true;
                state.message = action.payload;
            })
    }
})

export const { resetNotification, newNotification, updateNotification, setOnlineUsers, addOnlineUser, removeOnlineUser } = notificationSlice.actions;
export default notificationSlice.reducer;


// Helper functions
const updateArray = (array, item, key = '_id') => {
    const index = array.findIndex((el) => el[key] === item[key]);
    if (index === -1) {
        return [item, ...array];
    }
    const updatedArray = [...array];
    updatedArray[index] = { ...updatedArray[index], ...item };
    return updatedArray;
};

const addToArray = (array, item) => {
    if (!array.find((el) => el._id === item._id)) {
        return [item, ...array];
    }
    return array;
};

const removeFromArray = (array, item, key = '_id') => {
    return array.filter((el) => el[key] !== item[key]);
};



//Latest version from ms-student-portal
// import { createSlice } from '@reduxjs/toolkit';

// const initialState = {
//     notifications: [],
// };

// const notificationSlice = createSlice({
//     name: 'notification',
//     initialState,
//     reducers: {
//         setNotifications: (state, action) => {
//             state.notifications = action.payload;
//         },
//         newNotification: (state, action) => {
//             state.notifications.unshift(action.payload);
//         },
//         updateNotification: (state, action) => {
//             const index = state.notifications.findIndex((n) => n._id === action.payload._id);
//             if (index !== -1) {
//                 state.notifications[index] = action.payload;
//             }
//         },
//     },
// });

// // Export actions generated by createSlice
// export const { setNotifications, newNotification, updateNotification } = notificationSlice.actions;

// // Export the reducer
// export default notificationSlice.reducer;

